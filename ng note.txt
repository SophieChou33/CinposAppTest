ooo Angular 2.0 及 4.0 是使用 TypeScript，降低傳送錯誤格式資料的可能性

? 1. 準備好 node.js LTS
? 2. install Angular CLI
    --* npm install -g @angular/cli
? 3. angular document: 下載 angular 官方給的範例 package.json
    --* npm i
? 4. angular cli 的 ng serve 指令：建立伺服器運行環境

? 5. angular 專案結構說明：
    * 應用程式資料夾：/src
        - 頂級 HTML 樣板 eg.: /src/index.html
        - 頂級樣式表 eg.： /src/style.css
        - 應用程式開始執行： /src/main.ts
        - 應用程式圖示：/src/favicon.ico
        - 靜態資料夾： /src/assets/
        * ng 應用程式元件檔案資料夾： /src/app/
            // .component.ts 跟 .component.css 通常會一組放在 /app 目錄之下的資料夾中

            ? @Component 元件
            --* ng generate component home --standalone --inline-template --skip-tests
            會創建 home 元件資料夾(小駝峰會變成用-分開，全小寫)，
            並在其中新增 home.component.css 和 home.component.ts
             //   /src/app/home>home.component.css & home.component.ts

             命名規則：
             1. @Component>selector: app-<generate component 時用的名字>，在渲染(template)裡使用
            
            * 頂級 Angular 元件： /src/app/app.component.ts
                // 描述 app-root 元件的源檔案，可新增
                ooo 元件結構：
                * 1. import
                --* import {component} from '@angular/core'
                引入 angular 用於定義元件的方法
                << 非跟模組中建議要導入 CommonModule!
                * 2. @Component 定義
                --* @Component({ selector:'', imports: [], template: ``, styleUrls: []})
                @Component 用於定義元件。可定義元件模板
                    1. selector: 'app-home'
                        // 在渲染(template) 裡使用
                    2. standalone: true
                        // 描述元件是否需要 ngModule
                    3. imports: [HomeComponent,]
                        我的理解是，用於告訴 angular的 template，我要在這個元件裡使用哪些元件；要 import 才能放到 @Component 的 import 裡
                        你可以叫他們「型屬性」
                        // 描述元件的依賴關係
                    4. template: `<h1>template</h1>`
                        我的理解是渲染 (react 的 render())。
                        // 描述元件的 HTML 標記和佈局，template 跟 templateUrl 擇一
                    5. styleUrls: ['./home.component.css']
                        // 在陣列中列出元件使用的 CSS 檔案的 styles 跟 styleUrls 擇一
                * 3. export class Xxx{...} 類別定義
                --* export class AppComponent { <變數> = <變數value>; }
                存放 data
                // import {AppComponent} from './app.component'
            - 與頂級元件對應的樣式表： /src/app/app.component.css
    - 建立 ng 應用程式時所需的檔案資料夾： /.angular
    - 測試應用程式的檔案檔案資料夾： /.e2e
    - 建立工具描述 Angular 應用程式： /angular.json
    - 向 TypeScript 編譯器描述應用程式設定： /tsconfig.*

? 6. ng 介面 (interface)
    目的：指定型別 (因為 angular 2.0 和 4.0 是 Typescript)

    -* 建立新介面：
    --* ng generate interface <housinglocation>
    // interface 後面如果只給一個參數，那就會是檔案名稱，並且自動放到 /src，也可以指定路徑如 models/housinglocation (CLI 的設定)

    export class Xxx{} 是建立元件的指令做出來的
    export interface Xxx{} 是建立介面的指令做出來的

        ooo 介面結構
        * export
        --* export interface Xxx{}

    -* 使用此介面
    1. 在你要定義變數的地方 import 介面檔案
    2. 定義變數時，請把變數包在 housingLocation: <介面名> = {} 裡面

? 7. @Input 裝飾器


import { CommonModule } from '@angular/core'

@Component({
    selector: '',
    standalone: true,
    imports: [ CommonModule, <Module>]
    template: ``,
    styleUrls: ['<樣式路徑>']
})

export class <Module>{
    @Input() ...!: <Interface>;

}

屬性結繫： 
1. 請先在子元件導入 Input (@angular/core) 裝飾器

2. 子元件在 export 裡，用 @Input() 裝飾器新增一個子元件的屬性!
    -- !: 非空斷言運算符，告訴 TypeScript 此屬性 (housingLocation) 不能是 null 或 undefined
    -- <自訂的屬性名稱>(必須傳入的話就給個!): 型別(不想規定型別就寫any)
    即使父元件傳進來的是一個資料集，也不用特地在子元件裡告知傳進來的是陣列

3. 父元件：定義類中的屬性。
在 template 要給子元件加上你自訂義的屬性，用 [<自訂的屬性名稱>] = "<自訂的屬性名稱>" 把屬性內容傳給子元件自己。然後在父元件的 export，新增一個 <屬性>:<型別>={}，這個東西會被傳進子元件，然後你就可以用 <屬性.xxx> 物件取值了
- 如果父元件裡要給「陣列」，要用 <屬性>:<型別>[]=[ {},{},{},... ] 這種結構 (資料集)

有 @ 的被稱作裝飾器
@Input
@Component

ngFor：
類似 js for 迴圈的功能
-- *ngFor="let bbb of aaa"
在 template 加上 ngFor 之後，template 中元件的屬性值就變成指向 ngFor 的 let "" 裡的東西
有 *ngFor 的節點會自動歷遍父元件中定義的類中的屬性
<app-housing-location *ngFor="let bbb of aaa" [aaa]="bbb"></app-housing-location>
aaa: HousingLocation[] = [{}, {}, ...]

@Injectable : angular service
--* ng generate service housing --skip-tests

ngIf
為真時，渲染此元素。為假時，渲染懶加載元素 <ng-template #xxx>
--* <div *ngIf="show; then thenBlock; else elseBlock">this is ignored</div>
--* <ng-template #primaryBlock>Primary text to show</ng-template>
// <ng-template [ngIf]="heroes" [ngIfElse]="loading">

結構：
(import { Injectable } from '@angular/core';)
@Injectable({
  providedIn: 'root'
})
export class HousingService {
  constructor() { }
}

建立新服務
xxx.service.ts



因為是用 TypeScript，因此在類裡所有屬性都要先指定「類型」再「給值」
類型包含：
// 服務需要透過 inject 注入，單純給值就用 TypeScript 的方法就好
1. interface：指定型別 類型
2. service：設定類函數與變數 服務類型
3. Routes：路由 類型
4. ActivatedRoute：或取路由資料 服務類型
5. FormGroup：建立表單(裡面由new FormControl('') 組成) 建立型別
6. FormControl：建立表單 建立型別
// 當你要告訴 angular，你的類型雖然是物件，但這個屬性必須要給「包含此類型的多個物件」的值，才要加上 []。
// Routes 不用加上 []，因為 angular 知道他是陣列
// 有點像條件式!


介面(規範物件內容與型別) interface：
    1. 創建介面檔案：ng generate interface <housinglocation>

    2. 介面檔案內容：
        export interface Xxx{
            aaa: string;
            bbb: number;
            ccc: boolean;
        }
        這個東西(介面)規範了我的所有 Xxx 物件都要包含我指定的內容，並且必須是指定的型別

    3. 父元件使用 interface：
        aaa: HousingLocation[] = [];
        // 屬性名: 必須是包含 Xxx 的陣列 [指定是陣列並且初始化為空] = [陣列內容]

Service (專放變數與函數的元件)：
    1. 創建 service 檔案：ng generate service housing --skip-tests

    2. service 檔案內容：
    import { Injectable } from '@angular/core';
    @Injectable({
    providedIn: 'root'
    })
    export class HousingService {
        這邊放函數及變數
    }

    3. 父元件使用 Service：
        import { Component, inject } from '@angular/core';
        import { HousingService } from '../housing.service';
        housingService: HousingService = inject(HousingService);
        // 屬性名: 必須是包含 Xxx 的物件或 = [陣列內容，裡面請放物件
        constructor() {
            this.aaa = this.housingService.getAllHousingLocations();
        }
        // 構造函式的用法，用這個，才可以用 this.指自己

Routes 導頁
特點：angular 的 Routes 可以在模板中的某一塊使用，也就是說只有這一塊會渲染出你要渲染出來的元件，其餘部分 (如 header) 會保留。
並且，你可以用動態路由導頁
    1. 定義路由的檔案 /src/routes.ts

    2.  在主執行檔 (main.ts) 內導入路由檔案
        --* import routeConfig from './app/routes';
        並且給 bootstrapApplication() 一個屬性 providers
        --* bootstrapApplication(AppComponent,
        --* {providers: [provideProtractorTestingSupport(), provideRouter(routeConfig)]})
        --* .catch(err => console.error(err));

    3. 根元件 (app.component.ts) 中導入 RouterModule，才能使用：
        --* import { RouterModule } from '@angular/router';
        * 1. [routerLink] 屬性
        --* <a [routerLink]="['/']">
        其實就是 <a href="">，但屬性名和屬性值都要用中括號包起來
        --* <a [routerLink]=['/details', aaa.city]>
        參數一：靜態路由；參數二：動態路由
        * 2. <router-outlet></router-outlet>
        因為有在執行主檔 main.ts 中導入路由檔案 routes.ts，所以 router-outlet 會根據當前匹配的路由組件，加載並顯示對應的組件

    4. 路由檔案內容：
    import { Routes } from '@angular/router';
    // 導入所有你要導向的頁面元件
    import { HomeComponent } from './home/home.component';

    // 定義路由，以及要導向的頁面
    const routeConfig: Routes = [
        {
        path: '',
        component: TestmyComponentComponent,
        title: 'Home page'
        },
        {
        path: 'details/:id',
        component: DetailsComponent,
        title: 'Home details'
        }
    ];

    5. ActivatedRoute
        --* import { ActivatedRoute } from '@angular/router';
        用於抓取路由資料，尤其是動態路由捕捉
        * 把路由資料整組抓起來
        --* route: ActivatedRoute = inject(ActivatedRoute);
        * 在構造器中，用 snapshot 把動態參數抓出來
        --* const housingLocationId = Number(this.route.snapshot.params['id']);

Form - Angular 表單
    --* import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';
    * 在類中建立表單群組：
    applyForm = new FormGroup({
    firstName: new FormControl(''),
    lastName: new FormControl(''),
    email: new FormControl('')
    });
    * 在 template 中使用表單元素
    <form [formGroup]="applyForm" (submit)="submitApplication()">
        <label for="first-name">First Name</label>
        <input id="first-name" type="text" formControlName="firstName">

        <label for="last-name">Last Name</label>
        <input id="last-name" type="text" formControlName="lastName">

        <label for="email">Email</label>
        <input id="email" type="email" formControlName="email">
        <button type="submit" class="primary">Apply now</button>
    </form>
        -* [formGroup]="applyForm"
        告訴 form 標籤，我要連到哪個 angular formgroup
        -* (submit)="submitApplication()"
        告訴 form 標籤，當送出時我要觸發什麼
        -* formControlName="firstName"
        告訴 input 標籤，我要連到哪個 angular formcontrol
    
json server -JSON 伺服器建立
-用於建立模擬 REST API 的開源工具
    1. 安裝：
    --* npm install -g json-server

    2. 你可以在根目錄建立 db.json 用來儲存 json server 資料，模擬資料庫

    3. 執行 json server:
    --* json-server --watch db.json

樣版變數#
在樣板中用 #xxx 可以宣告變數，然後在樣板其他元素中取用比如 #phone.value，是取 #phone 樣板變數存在的元素的值
(react 的 useRef 的概念)

angular 添加事件
<input type="text" placeholder="Filter by city" #filter>
<button class="primary" type="button" (click)="filterResults(filter.value)">Search</button>

用 fetch 異部抓資料時：
會用到 Promise:
    async getAllHousingLocations(): Promise<HousingLocation[]> {
        const data = await fetch(this.url);
        return await data.json() ?? [];
    }
    - 那一大串同時指定要是「多個」此「類型」的物件且會返回「Promise」

! TypeScript
    * |
    聯合類型（Union Type） 符號。
    允許一個變數的類型是多個可能類型之一

    * 明確指定類型
    let x: number = 5;
    // 'x' 是變數名稱，'number' 是它的類型，=5 是給值

    ?? 空值合併運算符
    let result = value ?? defaultValue;
    簡單來講，當 value 為 null 或 undefined，就使用默認值